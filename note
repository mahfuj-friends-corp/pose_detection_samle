        // Step 2: Save Frame to Disk
        // final tempDir = await getTemporaryDirectory();
        // final framesDir = Directory('${tempDir.path}/pose_detection/frames');
        //
        // if (!framesDir.existsSync()) {
        //   framesDir.createSync(recursive: true);
        // }
        //
        // log('Image format group: ${image.format.group}');
        // log('Plane 0 (Y) bytes: ${image.planes[0].bytes.length}');
        // log('Plane 1 (U) bytes: ${image.planes.length > 1 ? image.planes[1]
        //     .bytes.length : 'N/A'}');
        // log('Plane 2 (V) bytes: ${image.planes.length > 2 ? image.planes[2]
        //     .bytes.length : 'N/A'}');
        //
        // final framePath = '${framesDir.path}/frame_${_frameCount.toString()
        //     .padLeft(3, "0")}.jpg';
        //
        //
        // final jpgBytes = await _convertCameraImageToJpg(image);
        // _saveFrameToDisk(SaveFrameArgs(jpgBytes, framePath));








          void _cleanupFrames() async {
            final tempDir = await getTemporaryDirectory();
            final framesDir = Directory('${tempDir.path}/pose_detection/frames');
            if (framesDir.existsSync()) {
              framesDir.deleteSync(recursive: true);
            }
          }


            // Future<Uint8List> _convertCameraImageToJpg(CameraImage image) async {
            //   try {
            //     // Convert YUV420 image to RGB
            //     final imgRgb = _convertYUV420ToImage(image);
            //
            //     // Encode RGB image to JPG
            //     final jpgBytes = img.encodeJpg(imgRgb);
            //     return Uint8List.fromList(jpgBytes);
            //   } catch (e) {
            //     print('Error converting image: $e');
            //     rethrow;
            //   }
            // }
            //
            //
            //
            //
            // static img.Image _convertYUV420ToImage(CameraImage image) {
            //   final width = image.width;
            //   final height = image.height;
            //
            //   if (Platform.isAndroid && image.format.group == ImageFormatGroup.nv21) {
            //     Uint8List yuv420sp = image.planes[0].bytes;
            //     final outImg = img.Image(height: height, width: width);
            //     final int frameSize = width * height;
            //
            //     for (int j = 0, yp = 0; j < height; j++) {
            //       int uvp = frameSize + (j >> 1) * width, u = 0, v = 0;
            //       for (int i = 0; i < width; i++, yp++) {
            //         int y = (0xff & yuv420sp[yp]) - 16;
            //         if (y < 0) y = 0;
            //         if ((i & 1) == 0) {
            //           v = (0xff & yuv420sp[uvp++]) - 128;
            //           u = (0xff & yuv420sp[uvp++]) - 128;
            //         }
            //         int y1192 = 1192 * y;
            //         int r = (y1192 + 1634 * v);
            //         int g = (y1192 - 833 * v - 400 * u);
            //         int b = (y1192 + 2066 * u);
            //
            //         if (r < 0) r = 0;
            //         else if (r > 262143) r = 262143;
            //         if (g < 0) g = 0;
            //         else if (g > 262143) g = 262143;
            //         if (b < 0) b = 0;
            //         else if (b > 262143) b = 262143;
            //
            //         outImg.setPixelRgba(i, j, ((r << 6) & 0xff0000) >> 16,
            //             ((g >> 2) & 0xff00) >> 8, (b >> 10) & 0xff, 255);
            //       }
            //     }
            //     return _rotateImage(outImg,cameras![0].sensorOrientation);
            //   } else if (Platform.isIOS && image.format.group == ImageFormatGroup.bgra8888) {
            //     final imgBuffer = image.planes[0].bytes;
            //     final rgbBuffer = Uint8List(width * height * 3);
            //
            //     for (int i = 0; i < width * height; i++) {
            //       final b = imgBuffer[i * 4];     // Blue
            //       final g = imgBuffer[i * 4 + 1]; // Green
            //       final r = imgBuffer[i * 4 + 2]; // Red
            //       rgbBuffer[i * 3] = r;
            //       rgbBuffer[i * 3 + 1] = g;
            //       rgbBuffer[i * 3 + 2] = b;
            //     }
            //
            //     return img.Image.fromBytes(
            //       width: width,
            //       height: height,
            //       bytes: rgbBuffer.buffer,
            //     );
            //   } else {
            //     throw Exception('Unsupported platform or image format.');
            //   }
            // }


            static img.Image _rotateImage(img.Image inputImage, int rotation) {
              switch (rotation) {
                case 90:
                  return img.copyRotate(inputImage, angle: 90);
                case 180:
                  return img.copyRotate(inputImage, angle: 180);
                case 270:
                  return img.copyRotate(inputImage, angle: 270);
                default:
                  return inputImage;
              }
            }